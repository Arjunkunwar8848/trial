import React from 'react';
import { AlertTriangle, CheckCircle, Info, Download, RefreshCw } from 'lucide-react';
import { useAppContext } from '../context/AppContext';

const ResultsDisplay: React.FC = () => {
  const { predictions, setCurrentStep, setIsAnalyzing, setPredictions } = useAppContext();

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'High':
        return 'text-red-600 bg-red-50 border-red-200';
      case 'Medium':
        return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'Low':
        return 'text-green-600 bg-green-50 border-green-200';
      default:
        return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getRiskIcon = (riskLevel: string) => {
    switch (riskLevel) {
      case 'High':
        return AlertTriangle;
      case 'Medium':
        return Info;
      case 'Low':
        return CheckCircle;
      default:
        return Info;
    }
  };

  const startNewAnalysis = () => {
    setCurrentStep(0);
    setIsAnalyzing(false);
    setPredictions([]);
  };

  return (
    <div className="max-w-6xl mx-auto">
      <div className="text-center mb-12">
        <h3 className="text-3xl font-bold text-gray-900 mb-4">Analysis Complete</h3>
        <p className="text-gray-600 text-lg">
          Our AI has processed your multimodal data and generated the following assessments
        </p>
      </div>

      <div className="grid gap-6 mb-8">
        {predictions.map((prediction, index) => {
          const RiskIcon = getRiskIcon(prediction.riskLevel);
          
          return (
            <div
              key={index}
              className={`bg-white rounded-xl border-2 p-6 shadow-lg hover:shadow-xl transition-all duration-300 ${getRiskColor(prediction.riskLevel).split(' ')[2]}`}
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-4">
                  <div className={`p-3 rounded-full ${getRiskColor(prediction.riskLevel)}`}>
                    <RiskIcon className="h-6 w-6" />
                  </div>
                  <div>
                    <h4 className="text-xl font-semibold text-gray-900">{prediction.condition}</h4>
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getRiskColor(prediction.riskLevel)}`}>
                      {prediction.riskLevel} Risk
                    </span>
                  </div>
                </div>
                
                <div className="text-right">
                  <div className="text-2xl font-bold text-gray-900">
                    {Math.round(prediction.confidence * 100)}%
                  </div>
                  <div className="text-sm text-gray-500">Confidence</div>
                </div>
              </div>

              <div className="mb-4">
                <div className="flex justify-between text-sm text-gray-600 mb-1">
                  <span>Confidence Score</span>
                  <span>{Math.round(prediction.confidence * 100)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className={`h-2 rounded-full transition-all duration-500 ${
                      prediction.confidence >= 0.7
                        ? 'bg-gradient-to-r from-red-400 to-red-600'
                        : prediction.confidence >= 0.4
                        ? 'bg-gradient-to-r from-yellow-400 to-yellow-600'
                        : 'bg-gradient-to-r from-green-400 to-green-600'
                    }`}
                    style={{ width: `${prediction.confidence * 100}%` }}
                  ></div>
                </div>
              </div>

              <div>
                <h5 className="font-semibold text-gray-900 mb-2">Recommendations</h5>
                <ul className="space-y-2">
                  {prediction.recommendations.map((rec, recIndex) => (
                    <li key={recIndex} className="flex items-start space-x-2">
                      <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
                      <span className="text-gray-700">{rec}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          );
        })}
      </div>

      <div className="bg-blue-50 rounded-xl p-6 mb-8">
        <h4 className="font-semibold text-blue-900 mb-3">Important Notice</h4>
        <p className="text-blue-800 leading-relaxed">
          These results are generated by AI models for research and educational purposes. 
          They should not replace professional medical diagnosis or treatment decisions. 
          Please consult with qualified healthcare professionals for proper medical evaluation and care.
        </p>
      </div>

      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <button
          onClick={startNewAnalysis}
          className="flex items-center justify-center space-x-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-teal-600 text-white rounded-lg hover:from-blue-700 hover:to-teal-700 transition-all duration-300 transform hover:scale-105"
        >
          <RefreshCw className="h-5 w-5" />
          <span>New Analysis</span>
        </button>
        
        <button className="flex items-center justify-center space-x-2 px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-300">
          <Download className="h-5 w-5" />
          <span>Download Report</span>
        </button>
      </div>
    </div>
  );
};

export default ResultsDisplay;